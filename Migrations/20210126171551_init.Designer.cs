// <auto-generated />
using System;
using FileExchanger.Domain.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FileExchanger.Migrations
{
    [DbContext(typeof(FileExchangerDbContext))]
    [Migration("20210126171551_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("FileExchanger.Domain.Models.Content.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("PublicationId")
                        .HasColumnType("bigint");

                    b.Property<double>("Summary")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeGuid");

                    b.HasIndex("PublicationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Content.Publication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("AddedDated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<long?>("LBCId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OtherAuthors")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<long?>("PublicationInfoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PublicationLanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("RightHolder")
                        .HasColumnType("text");

                    b.Property<long?>("ThematicsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UDCId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LBCId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PublicationInfoId");

                    b.HasIndex("PublicationLanguageId");

                    b.HasIndex("ThematicsId");

                    b.HasIndex("UDCId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Content.PublicationInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<bool>("HasImages")
                        .HasColumnType("boolean");

                    b.Property<string>("ISCode")
                        .HasColumnType("text");

                    b.Property<long>("Pages")
                        .HasColumnType("bigint");

                    b.Property<long?>("PublicationTypeNameId")
                        .HasColumnType("bigint");

                    b.Property<string>("PublishedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishingYear")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ResourseLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PublicationTypeNameId");

                    b.ToTable("PublicationInfo");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Dictionaries.Codes.LBC", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("LBCs");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Dictionaries.Codes.UDC", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UDCs");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Dictionaries.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Dictionaries.PublicationTypeName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PublicationTypeNames");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Dictionaries.Thematic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Thematics");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.People.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("AditionalInfo");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("MiddleName");

                    b.HasKey("Guid");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.People.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EmployeeGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeGuid")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PublicationUser", b =>
                {
                    b.Property<long>("CartId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UsersCartId")
                        .HasColumnType("uuid");

                    b.HasKey("CartId", "UsersCartId");

                    b.HasIndex("UsersCartId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("PublicationUser1", b =>
                {
                    b.Property<long>("AcquiredId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UsersAcquiredId")
                        .HasColumnType("uuid");

                    b.HasKey("AcquiredId", "UsersAcquiredId");

                    b.HasIndex("UsersAcquiredId");

                    b.ToTable("Acquired");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Content.Order", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.People.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeGuid");

                    b.HasOne("FileExchanger.Domain.Models.Content.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId");

                    b.Navigation("Employee");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Content.Publication", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.Dictionaries.Codes.LBC", "LBC")
                        .WithMany()
                        .HasForeignKey("LBCId");

                    b.HasOne("FileExchanger.Domain.Models.People.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("FileExchanger.Domain.Models.Content.PublicationInfo", "PublicationInfo")
                        .WithMany()
                        .HasForeignKey("PublicationInfoId");

                    b.HasOne("FileExchanger.Domain.Models.Dictionaries.Language", "PublicationLanguage")
                        .WithMany()
                        .HasForeignKey("PublicationLanguageId");

                    b.HasOne("FileExchanger.Domain.Models.Dictionaries.Thematic", "Thematics")
                        .WithMany()
                        .HasForeignKey("ThematicsId");

                    b.HasOne("FileExchanger.Domain.Models.Dictionaries.Codes.UDC", "UDC")
                        .WithMany()
                        .HasForeignKey("UDCId");

                    b.Navigation("LBC");

                    b.Navigation("Owner");

                    b.Navigation("PublicationInfo");

                    b.Navigation("PublicationLanguage");

                    b.Navigation("Thematics");

                    b.Navigation("UDC");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.Content.PublicationInfo", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.Dictionaries.PublicationTypeName", "PublicationTypeName")
                        .WithMany()
                        .HasForeignKey("PublicationTypeNameId");

                    b.Navigation("PublicationTypeName");
                });

            modelBuilder.Entity("FileExchanger.Domain.Models.People.User", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.People.Employee", "Employee")
                        .WithOne()
                        .HasForeignKey("FileExchanger.Domain.Models.People.User", "EmployeeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.People.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.People.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileExchanger.Domain.Models.People.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.People.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublicationUser", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.Content.Publication", null)
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileExchanger.Domain.Models.People.User", null)
                        .WithMany()
                        .HasForeignKey("UsersCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublicationUser1", b =>
                {
                    b.HasOne("FileExchanger.Domain.Models.Content.Publication", null)
                        .WithMany()
                        .HasForeignKey("AcquiredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileExchanger.Domain.Models.People.User", null)
                        .WithMany()
                        .HasForeignKey("UsersAcquiredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
